前情回顾

1. 阻塞IO

   * 函数阻塞
	 * 高延迟

2. 非阻塞IO 

   * 非阻塞状态    setblocking()
	 * 超时检测     settimeout() 

3. IO多路复用

   select

	 poll

	 epoll

  * 跨平台
	* 效率
	* 触发方式
	* 同时监控IO数量


接口设计

  * 提供句柄,通过句柄调用属性方法解决问题
	  
		fd = open()
		sockfd = socket()
		lock = Lock()
		db = pymysql.connect()
	
	* 实例化对象,通过对象设置,启动服务

	  t = Thread()
		p = Process()
		s = socketserver()

	* 根据功能需求,如果无法替用户决定的内容,通过参数传递

	* 能够解决的问题,不要让用户解决.需要用户解决的问题可以用重写的方式让用户重写


技术分析: 
    
		1. HTTP协议熟悉
		2. select 并发
		3. 套接字tcp

